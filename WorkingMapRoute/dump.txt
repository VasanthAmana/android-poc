/*
    @Override
    public void onCreate(Bundle savedInstanceState) {
    	
    	GeoPoint source = new GeoPoint(13066196, 80175195);
    	GeoPoint destination = new GeoPoint(13086693, 80187334);
        super.onCreate(savedInstanceState);
        setContentView(R.layout.show_the_map);

        MapView mapView = (MapView) findViewById(R.id.mv);
        mapView.setBuiltInZoomControls(true);

        // Acquire a reference to the system Location Manager
        LocationManager locationManager = (LocationManager) this.getSystemService(Context.LOCATION_SERVICE);

        String locationProvider = LocationManager.NETWORK_PROVIDER;
        Location lastKnownLocation = locationManager.getLastKnownLocation(locationProvider);

        StringBuilder urlString = new StringBuilder();
        urlString.append("http://maps.google.com/maps?f=d&hl=en");
        urlString.append("&saddr=");//from
        urlString.append(source.getLatitudeE6()/1.0E6);
        urlString.append(",");
        urlString.append(source.getLongitudeE6()/1.0E6);
        urlString.append("&daddr=");//to
        urlString.append(destination.getLatitudeE6()/1.0E6);
        urlString.append(",");
        urlString.append(destination.getLongitudeE6()/1.0E6);
        urlString.append("&ie=UTF8&0&om=0&output=kml");
Log.d("MyApp", urlString.toString());
        try{
            // setup the url
            URL url = new URL(urlString.toString());
            // create the factory
            SAXParserFactory factory = SAXParserFactory.newInstance();
            // create a parser
            SAXParser parser = factory.newSAXParser();
            // create the reader (scanner)
            XMLReader xmlreader = parser.getXMLReader();
            // instantiate our handler
            NavigationSaxHandler navSaxHandler = new NavigationSaxHandler();
            // assign our handler
            xmlreader.setContentHandler(navSaxHandler);
            // get our data via the url class
            InputSource is = new InputSource(url.openStream());
            // perform the synchronous parse           
            xmlreader.parse(is);
            // get the results - should be a fully populated RSSFeed instance, or null on error
            NavigationDataSet ds = navSaxHandler.getParsedData();

            // draw path
            drawPath(ds, Color.parseColor("#add331"), mapView );

            Drawable dot = this.getResources().getDrawable(R.drawable.pixel);
            MapItemizedOverlay bgItemizedOverlay = new MapItemizedOverlay(dot,this);
            OverlayItem currentPixel = new OverlayItem(destination, null, null );
            OverlayItem destPixel = new OverlayItem(source, null, null );
            bgItemizedOverlay.addOverlay(currentPixel);
            bgItemizedOverlay.addOverlay(destPixel);

            // center and zoom in the map
            MapController mc = mapView.getController();
            mc.zoomToSpan(bgItemizedOverlay.getLatSpanE6()*2,bgItemizedOverlay.getLonSpanE6()*2);
            mc.animateTo(new GeoPoint(
                    (source.getLatitudeE6() + destination.getLatitudeE6()) / 2
                    , (source.getLongitudeE6() + destination.getLongitudeE6()) / 2));

        } catch(Exception e) {
            Log.d("DirectionMap","Exception parsing kml.");
        }

    }
*/

 /**
	 * Does the actual drawing of the route, based on the geo points provided in the nav set
	 *
	 * @param navSet     Navigation set bean that holds the route information, incl. geo pos
	 * @param color      Color in which to draw the lines
	 * @param mapView Map view to draw onto
	 
	public void drawPath(NavigationDataSet navSet, int color, MapView mapView) {

	    Log.d("MY_APP", "map color before: " + color);        

	    // color correction for dining, make it darker
	    if (color == Color.parseColor("#add331")) color = Color.parseColor("#6C8715");
	    Log.d("MY_APP", "map color after: " + color);

	    Collection<Overlay> overlaysToAddAgain = new ArrayList<Overlay>();
	    for (Iterator<Overlay> iter = mapView.getOverlays().iterator(); iter.hasNext();) {
	        Overlay o = iter.next();
	        Log.d("MY_APP", "overlay type: " + o.getClass().getName());
	        if (!RouteOverlay.class.getName().equals(o.getClass().getName())) {
	            // mMapView01.getOverlays().remove(o);
	            overlaysToAddAgain.add(o);
	        }
	    }
	    mapView.getOverlays().clear();
	    mapView.getOverlays().addAll(overlaysToAddAgain);

	    String path = navSet.getRoutePlacemark().getCoordinates();
	    Log.d("MY_APP", "path=" + path);
	    if (path != null && path.trim().length() > 0) {
	        String[] pairs = path.trim().split(" ");

	        Log.d("MY_APP", "pairs.length=" + pairs.length);

	        String[] lngLat = pairs[0].split(","); // lngLat[0]=longitude lngLat[1]=latitude lngLat[2]=height

	        Log.d("MY_APP", "lnglat =" + lngLat + ", length: " + lngLat.length);

	        if (lngLat.length<3) lngLat = pairs[1].split(","); // if first pair is not transferred completely, take seconds pair //TODO 

	        try {
	            GeoPoint startGP = new GeoPoint((int) (Double.parseDouble(lngLat[1]) * 1E6), (int) (Double.parseDouble(lngLat[0]) * 1E6));
	            mapView.getOverlays().add(new RouteOverlay(startGP, startGP, 1));
	            GeoPoint gp1;
	            GeoPoint gp2 = startGP;

	            for (int i = 1; i < pairs.length; i++) // the last one would be crash
	            {
	                lngLat = pairs[i].split(",");

	                gp1 = gp2;

	                if (lngLat.length >= 2 && gp1.getLatitudeE6() > 0 && gp1.getLongitudeE6() > 0
	                        && gp2.getLatitudeE6() > 0 && gp2.getLongitudeE6() > 0) {

	                    // for GeoPoint, first:latitude, second:longitude
	                    gp2 = new GeoPoint((int) (Double.parseDouble(lngLat[1]) * 1E6), (int) (Double.parseDouble(lngLat[0]) * 1E6));

	                    if (gp2.getLatitudeE6() != 22200000) { 
	                        mapView.getOverlays().add(new RouteOverlay(gp1, gp2, 2, color));
	                        Log.d("MY_APP", "draw:" + gp1.getLatitudeE6() + "/" + gp1.getLongitudeE6() + " TO " + gp2.getLatitudeE6() + "/" + gp2.getLongitudeE6());
	                    }
	                }
	                // Log.d("MY_APP","pair:" + pairs[i]);
	            }
	            //routeOverlays.add(new RouteOverlay(gp2,gp2, 3));
	            mapView.getOverlays().add(new RouteOverlay(gp2, gp2, 3));
	        } catch (NumberFormatException e) {
	            Log.e("MY_APP", "Cannot draw route.", e);
	        }
	    }
	    // mMapView01.getOverlays().addAll(routeOverlays); // use the default color
	    mapView.setEnabled(true);
	}*/